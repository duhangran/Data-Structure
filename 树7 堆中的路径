05-树7 堆中的路径 (25 分)
将一系列给定数字插入一个初始为空的小顶堆H[]。随后对任意给定的下标i，打印从H[i]到根结点的路径。

输入格式:
每组测试第1行包含2个正整数N和M(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。
下一行给出区间[-10000, 10000]内的N个要被插入一个初始为空的小顶堆的整数。最后一行给出M个下标。

输出格式:
对输入中给出的每个下标i，在一行中输出从H[i]到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。

输入样例:
5 3
46 23 26 24 10
5 4 3
输出样例:
24 23 10
46 23 10
26 10


















#include<stdio.h>
#include<stdlib.h>
struct minheap
{
	int size;
	int *data;
	int capacity;
};
typedef struct minheap *MinHeap;
MinHeap creatheap(int maxsize);
MinHeap insert(MinHeap H,int item);
int isfull(MinHeap H);
int isempty(MinHeap H);
void printh(MinHeap H,int item);
int main()
{
	MinHeap H;
	int N;
	int i,j,t;
	scanf("%d %d",&N,&j);
	H=creatheap(N);
	while(N--)
	{
        scanf("%d",&t);
        insert(H,t);
	}
    while(j--)
    {
        scanf("%d",&t);
        printh(H,t);
        printf("\n");   
    }
	return 0;
}
MinHeap creatheap(int maxsize)
{
	MinHeap H=(MinHeap)malloc(sizeof(struct minheap));
	H->data=(int *)malloc((maxsize+1)*sizeof(int));
	H->size=0;
	H->capacity=maxsize;
	return H;
}
MinHeap insert(MinHeap H,int item)
{
	int i;
	if(isfull(H))
	{
		printf("堆已满!");
		return;
	}
	else
	{
		i=++H->size;
		for(;item<H->data[i/2]&&i>1;i/=2)
			H->data[i]=H->data[i/2];
		H->data[i]=item;
	}
	return H;
}
int isfull(MinHeap H)
{
	if(H->capacity==H->size)
		return 1;
	else return 0;
}
void printh(MinHeap H,int item)
{
	int i;
	int flag=1;
	if(isempty(H))
	{
		printf("堆为空");
		return;
	}
	else
	{
		for(i=item;i>0;i/=2)
		{
			if(flag)
			{
				printf("%d",H->data[i]);
				flag=0;
			}
			else
			{
				printf(" %d",H->data[i]);
			}
		}
	}
}
int isempty(MinHeap H)
{
	return (H->size==0);
}
